// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: plc_ide/plc_ide.proto

package plcide

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PLCRuntimeService_StreamLogs_FullMethodName          = "/plcide.PLCRuntimeService/StreamLogs"
	PLCRuntimeService_ExportLogs_FullMethodName          = "/plcide.PLCRuntimeService/ExportLogs"
	PLCRuntimeService_ImportProjectConfig_FullMethodName = "/plcide.PLCRuntimeService/ImportProjectConfig"
	PLCRuntimeService_ExportProjectConfig_FullMethodName = "/plcide.PLCRuntimeService/ExportProjectConfig"
	PLCRuntimeService_ListProjectVersions_FullMethodName = "/plcide.PLCRuntimeService/ListProjectVersions"
	PLCRuntimeService_CreateProject_FullMethodName       = "/plcide.PLCRuntimeService/CreateProject"
	PLCRuntimeService_DeleteProject_FullMethodName       = "/plcide.PLCRuntimeService/DeleteProject"
	PLCRuntimeService_ListProjects_FullMethodName        = "/plcide.PLCRuntimeService/ListProjects"
)

// PLCRuntimeServiceClient is the client API for PLCRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ================== 核心服务定义 ==================
type PLCRuntimeServiceClient interface {
	// 日志管理
	StreamLogs(ctx context.Context, in *LogSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	ExportLogs(ctx context.Context, in *LogExportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogChunk], error)
	// 配置管理
	ImportProjectConfig(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ConfigChunk, ImportStatus], error)
	ExportProjectConfig(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConfigChunk], error)
	ListProjectVersions(ctx context.Context, in *VersionQuery, opts ...grpc.CallOption) (*ProjectVersions, error)
	// 项目管理
	CreateProject(ctx context.Context, in *ProjectMetadata, opts ...grpc.CallOption) (*ProjectCreationResponse, error)
	DeleteProject(ctx context.Context, in *ProjectIdentifier, opts ...grpc.CallOption) (*OperationStatus, error)
	ListProjects(ctx context.Context, in *ProjectFilter, opts ...grpc.CallOption) (*ProjectList, error)
}

type pLCRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPLCRuntimeServiceClient(cc grpc.ClientConnInterface) PLCRuntimeServiceClient {
	return &pLCRuntimeServiceClient{cc}
}

func (c *pLCRuntimeServiceClient) StreamLogs(ctx context.Context, in *LogSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PLCRuntimeService_ServiceDesc.Streams[0], PLCRuntimeService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogSubscription, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_StreamLogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *pLCRuntimeServiceClient) ExportLogs(ctx context.Context, in *LogExportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PLCRuntimeService_ServiceDesc.Streams[1], PLCRuntimeService_ExportLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogExportRequest, LogChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_ExportLogsClient = grpc.ServerStreamingClient[LogChunk]

func (c *pLCRuntimeServiceClient) ImportProjectConfig(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ConfigChunk, ImportStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PLCRuntimeService_ServiceDesc.Streams[2], PLCRuntimeService_ImportProjectConfig_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConfigChunk, ImportStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_ImportProjectConfigClient = grpc.ClientStreamingClient[ConfigChunk, ImportStatus]

func (c *pLCRuntimeServiceClient) ExportProjectConfig(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConfigChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PLCRuntimeService_ServiceDesc.Streams[3], PLCRuntimeService_ExportProjectConfig_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportRequest, ConfigChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_ExportProjectConfigClient = grpc.ServerStreamingClient[ConfigChunk]

func (c *pLCRuntimeServiceClient) ListProjectVersions(ctx context.Context, in *VersionQuery, opts ...grpc.CallOption) (*ProjectVersions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectVersions)
	err := c.cc.Invoke(ctx, PLCRuntimeService_ListProjectVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLCRuntimeServiceClient) CreateProject(ctx context.Context, in *ProjectMetadata, opts ...grpc.CallOption) (*ProjectCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectCreationResponse)
	err := c.cc.Invoke(ctx, PLCRuntimeService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLCRuntimeServiceClient) DeleteProject(ctx context.Context, in *ProjectIdentifier, opts ...grpc.CallOption) (*OperationStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, PLCRuntimeService_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLCRuntimeServiceClient) ListProjects(ctx context.Context, in *ProjectFilter, opts ...grpc.CallOption) (*ProjectList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectList)
	err := c.cc.Invoke(ctx, PLCRuntimeService_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PLCRuntimeServiceServer is the server API for PLCRuntimeService service.
// All implementations must embed UnimplementedPLCRuntimeServiceServer
// for forward compatibility.
//
// ================== 核心服务定义 ==================
type PLCRuntimeServiceServer interface {
	// 日志管理
	StreamLogs(*LogSubscription, grpc.ServerStreamingServer[LogEntry]) error
	ExportLogs(*LogExportRequest, grpc.ServerStreamingServer[LogChunk]) error
	// 配置管理
	ImportProjectConfig(grpc.ClientStreamingServer[ConfigChunk, ImportStatus]) error
	ExportProjectConfig(*ExportRequest, grpc.ServerStreamingServer[ConfigChunk]) error
	ListProjectVersions(context.Context, *VersionQuery) (*ProjectVersions, error)
	// 项目管理
	CreateProject(context.Context, *ProjectMetadata) (*ProjectCreationResponse, error)
	DeleteProject(context.Context, *ProjectIdentifier) (*OperationStatus, error)
	ListProjects(context.Context, *ProjectFilter) (*ProjectList, error)
	mustEmbedUnimplementedPLCRuntimeServiceServer()
}

// UnimplementedPLCRuntimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPLCRuntimeServiceServer struct{}

func (UnimplementedPLCRuntimeServiceServer) StreamLogs(*LogSubscription, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) ExportLogs(*LogExportRequest, grpc.ServerStreamingServer[LogChunk]) error {
	return status.Errorf(codes.Unimplemented, "method ExportLogs not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) ImportProjectConfig(grpc.ClientStreamingServer[ConfigChunk, ImportStatus]) error {
	return status.Errorf(codes.Unimplemented, "method ImportProjectConfig not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) ExportProjectConfig(*ExportRequest, grpc.ServerStreamingServer[ConfigChunk]) error {
	return status.Errorf(codes.Unimplemented, "method ExportProjectConfig not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) ListProjectVersions(context.Context, *VersionQuery) (*ProjectVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectVersions not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) CreateProject(context.Context, *ProjectMetadata) (*ProjectCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) DeleteProject(context.Context, *ProjectIdentifier) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) ListProjects(context.Context, *ProjectFilter) (*ProjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) mustEmbedUnimplementedPLCRuntimeServiceServer() {}
func (UnimplementedPLCRuntimeServiceServer) testEmbeddedByValue()                           {}

// UnsafePLCRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PLCRuntimeServiceServer will
// result in compilation errors.
type UnsafePLCRuntimeServiceServer interface {
	mustEmbedUnimplementedPLCRuntimeServiceServer()
}

func RegisterPLCRuntimeServiceServer(s grpc.ServiceRegistrar, srv PLCRuntimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPLCRuntimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PLCRuntimeService_ServiceDesc, srv)
}

func _PLCRuntimeService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PLCRuntimeServiceServer).StreamLogs(m, &grpc.GenericServerStream[LogSubscription, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_StreamLogsServer = grpc.ServerStreamingServer[LogEntry]

func _PLCRuntimeService_ExportLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PLCRuntimeServiceServer).ExportLogs(m, &grpc.GenericServerStream[LogExportRequest, LogChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_ExportLogsServer = grpc.ServerStreamingServer[LogChunk]

func _PLCRuntimeService_ImportProjectConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PLCRuntimeServiceServer).ImportProjectConfig(&grpc.GenericServerStream[ConfigChunk, ImportStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_ImportProjectConfigServer = grpc.ClientStreamingServer[ConfigChunk, ImportStatus]

func _PLCRuntimeService_ExportProjectConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PLCRuntimeServiceServer).ExportProjectConfig(m, &grpc.GenericServerStream[ExportRequest, ConfigChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PLCRuntimeService_ExportProjectConfigServer = grpc.ServerStreamingServer[ConfigChunk]

func _PLCRuntimeService_ListProjectVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).ListProjectVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_ListProjectVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).ListProjectVersions(ctx, req.(*VersionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLCRuntimeService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).CreateProject(ctx, req.(*ProjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLCRuntimeService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).DeleteProject(ctx, req.(*ProjectIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLCRuntimeService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).ListProjects(ctx, req.(*ProjectFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// PLCRuntimeService_ServiceDesc is the grpc.ServiceDesc for PLCRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PLCRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plcide.PLCRuntimeService",
	HandlerType: (*PLCRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjectVersions",
			Handler:    _PLCRuntimeService_ListProjectVersions_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _PLCRuntimeService_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _PLCRuntimeService_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _PLCRuntimeService_ListProjects_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _PLCRuntimeService_StreamLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportLogs",
			Handler:       _PLCRuntimeService_ExportLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportProjectConfig",
			Handler:       _PLCRuntimeService_ImportProjectConfig_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExportProjectConfig",
			Handler:       _PLCRuntimeService_ExportProjectConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plc_ide/plc_ide.proto",
}
