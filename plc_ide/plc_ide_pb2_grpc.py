# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import plc_ide.plc_ide_pb2 as plc__ide__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in plc_ide_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PLCRuntimeServiceStub(object):
    """================== 核心服务定义 ==================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamLogs = channel.unary_stream(
                '/plcide.PLCRuntimeService/StreamLogs',
                request_serializer=plc__ide__pb2.LogSubscription.SerializeToString,
                response_deserializer=plc__ide__pb2.LogEntry.FromString,
                _registered_method=True)
        self.ExportLogs = channel.unary_stream(
                '/plcide.PLCRuntimeService/ExportLogs',
                request_serializer=plc__ide__pb2.LogExportRequest.SerializeToString,
                response_deserializer=plc__ide__pb2.LogChunk.FromString,
                _registered_method=True)
        self.ImportProjectConfig = channel.stream_unary(
                '/plcide.PLCRuntimeService/ImportProjectConfig',
                request_serializer=plc__ide__pb2.ConfigChunk.SerializeToString,
                response_deserializer=plc__ide__pb2.ImportStatus.FromString,
                _registered_method=True)
        self.ExportProjectConfig = channel.unary_stream(
                '/plcide.PLCRuntimeService/ExportProjectConfig',
                request_serializer=plc__ide__pb2.ExportRequest.SerializeToString,
                response_deserializer=plc__ide__pb2.ConfigChunk.FromString,
                _registered_method=True)
        self.ListProjectVersions = channel.unary_unary(
                '/plcide.PLCRuntimeService/ListProjectVersions',
                request_serializer=plc__ide__pb2.VersionQuery.SerializeToString,
                response_deserializer=plc__ide__pb2.ProjectVersions.FromString,
                _registered_method=True)
        self.CreateProject = channel.unary_unary(
                '/plcide.PLCRuntimeService/CreateProject',
                request_serializer=plc__ide__pb2.ProjectMetadata.SerializeToString,
                response_deserializer=plc__ide__pb2.ProjectCreationResponse.FromString,
                _registered_method=True)
        self.DeleteProject = channel.unary_unary(
                '/plcide.PLCRuntimeService/DeleteProject',
                request_serializer=plc__ide__pb2.ProjectIdentifier.SerializeToString,
                response_deserializer=plc__ide__pb2.OperationStatus.FromString,
                _registered_method=True)
        self.ListProjects = channel.unary_unary(
                '/plcide.PLCRuntimeService/ListProjects',
                request_serializer=plc__ide__pb2.ProjectFilter.SerializeToString,
                response_deserializer=plc__ide__pb2.ProjectList.FromString,
                _registered_method=True)


class PLCRuntimeServiceServicer(object):
    """================== 核心服务定义 ==================
    """

    def StreamLogs(self, request, context):
        """日志管理
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportProjectConfig(self, request_iterator, context):
        """配置管理
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportProjectConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProjectVersions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProject(self, request, context):
        """项目管理
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PLCRuntimeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLogs,
                    request_deserializer=plc__ide__pb2.LogSubscription.FromString,
                    response_serializer=plc__ide__pb2.LogEntry.SerializeToString,
            ),
            'ExportLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.ExportLogs,
                    request_deserializer=plc__ide__pb2.LogExportRequest.FromString,
                    response_serializer=plc__ide__pb2.LogChunk.SerializeToString,
            ),
            'ImportProjectConfig': grpc.stream_unary_rpc_method_handler(
                    servicer.ImportProjectConfig,
                    request_deserializer=plc__ide__pb2.ConfigChunk.FromString,
                    response_serializer=plc__ide__pb2.ImportStatus.SerializeToString,
            ),
            'ExportProjectConfig': grpc.unary_stream_rpc_method_handler(
                    servicer.ExportProjectConfig,
                    request_deserializer=plc__ide__pb2.ExportRequest.FromString,
                    response_serializer=plc__ide__pb2.ConfigChunk.SerializeToString,
            ),
            'ListProjectVersions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProjectVersions,
                    request_deserializer=plc__ide__pb2.VersionQuery.FromString,
                    response_serializer=plc__ide__pb2.ProjectVersions.SerializeToString,
            ),
            'CreateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProject,
                    request_deserializer=plc__ide__pb2.ProjectMetadata.FromString,
                    response_serializer=plc__ide__pb2.ProjectCreationResponse.SerializeToString,
            ),
            'DeleteProject': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProject,
                    request_deserializer=plc__ide__pb2.ProjectIdentifier.FromString,
                    response_serializer=plc__ide__pb2.OperationStatus.SerializeToString,
            ),
            'ListProjects': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProjects,
                    request_deserializer=plc__ide__pb2.ProjectFilter.FromString,
                    response_serializer=plc__ide__pb2.ProjectList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plcide.PLCRuntimeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('plcide.PLCRuntimeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PLCRuntimeService(object):
    """================== 核心服务定义 ==================
    """

    @staticmethod
    def StreamLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/plcide.PLCRuntimeService/StreamLogs',
            plc__ide__pb2.LogSubscription.SerializeToString,
            plc__ide__pb2.LogEntry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExportLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/plcide.PLCRuntimeService/ExportLogs',
            plc__ide__pb2.LogExportRequest.SerializeToString,
            plc__ide__pb2.LogChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImportProjectConfig(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/plcide.PLCRuntimeService/ImportProjectConfig',
            plc__ide__pb2.ConfigChunk.SerializeToString,
            plc__ide__pb2.ImportStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExportProjectConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/plcide.PLCRuntimeService/ExportProjectConfig',
            plc__ide__pb2.ExportRequest.SerializeToString,
            plc__ide__pb2.ConfigChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListProjectVersions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plcide.PLCRuntimeService/ListProjectVersions',
            plc__ide__pb2.VersionQuery.SerializeToString,
            plc__ide__pb2.ProjectVersions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plcide.PLCRuntimeService/CreateProject',
            plc__ide__pb2.ProjectMetadata.SerializeToString,
            plc__ide__pb2.ProjectCreationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plcide.PLCRuntimeService/DeleteProject',
            plc__ide__pb2.ProjectIdentifier.SerializeToString,
            plc__ide__pb2.OperationStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListProjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plcide.PLCRuntimeService/ListProjects',
            plc__ide__pb2.ProjectFilter.SerializeToString,
            plc__ide__pb2.ProjectList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
