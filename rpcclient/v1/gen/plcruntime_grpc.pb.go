// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: plcruntime.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PLCRuntimeService_ExportLogs_FullMethodName    = "/plcruntime.PLCRuntimeService/ExportLogs"
	PLCRuntimeService_CreateProject_FullMethodName = "/plcruntime.PLCRuntimeService/CreateProject"
	PLCRuntimeService_ImportProgram_FullMethodName = "/plcruntime.PLCRuntimeService/ImportProgram"
	PLCRuntimeService_ExportProject_FullMethodName = "/plcruntime.PLCRuntimeService/ExportProject"
)

// PLCRuntimeServiceClient is the client API for PLCRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PLCRuntimeServiceClient interface {
	ExportLogs(ctx context.Context, in *LogExportRequest, opts ...grpc.CallOption) (*LogEntry, error)
	CreateProject(ctx context.Context, in *ProjectMetadata, opts ...grpc.CallOption) (*ProjectCreationResponse, error)
	ImportProgram(ctx context.Context, in *ProgramSource, opts ...grpc.CallOption) (*ImportStatus, error)
	ExportProject(ctx context.Context, in *ProjectExportRequest, opts ...grpc.CallOption) (*ProjectMetadata, error)
}

type pLCRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPLCRuntimeServiceClient(cc grpc.ClientConnInterface) PLCRuntimeServiceClient {
	return &pLCRuntimeServiceClient{cc}
}

func (c *pLCRuntimeServiceClient) ExportLogs(ctx context.Context, in *LogExportRequest, opts ...grpc.CallOption) (*LogEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogEntry)
	err := c.cc.Invoke(ctx, PLCRuntimeService_ExportLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLCRuntimeServiceClient) CreateProject(ctx context.Context, in *ProjectMetadata, opts ...grpc.CallOption) (*ProjectCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectCreationResponse)
	err := c.cc.Invoke(ctx, PLCRuntimeService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLCRuntimeServiceClient) ImportProgram(ctx context.Context, in *ProgramSource, opts ...grpc.CallOption) (*ImportStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportStatus)
	err := c.cc.Invoke(ctx, PLCRuntimeService_ImportProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLCRuntimeServiceClient) ExportProject(ctx context.Context, in *ProjectExportRequest, opts ...grpc.CallOption) (*ProjectMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectMetadata)
	err := c.cc.Invoke(ctx, PLCRuntimeService_ExportProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PLCRuntimeServiceServer is the server API for PLCRuntimeService service.
// All implementations must embed UnimplementedPLCRuntimeServiceServer
// for forward compatibility.
type PLCRuntimeServiceServer interface {
	ExportLogs(context.Context, *LogExportRequest) (*LogEntry, error)
	CreateProject(context.Context, *ProjectMetadata) (*ProjectCreationResponse, error)
	ImportProgram(context.Context, *ProgramSource) (*ImportStatus, error)
	ExportProject(context.Context, *ProjectExportRequest) (*ProjectMetadata, error)
	mustEmbedUnimplementedPLCRuntimeServiceServer()
}

// UnimplementedPLCRuntimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPLCRuntimeServiceServer struct{}

func (UnimplementedPLCRuntimeServiceServer) ExportLogs(context.Context, *LogExportRequest) (*LogEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportLogs not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) CreateProject(context.Context, *ProjectMetadata) (*ProjectCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) ImportProgram(context.Context, *ProgramSource) (*ImportStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProgram not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) ExportProject(context.Context, *ProjectExportRequest) (*ProjectMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportProject not implemented")
}
func (UnimplementedPLCRuntimeServiceServer) mustEmbedUnimplementedPLCRuntimeServiceServer() {}
func (UnimplementedPLCRuntimeServiceServer) testEmbeddedByValue()                           {}

// UnsafePLCRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PLCRuntimeServiceServer will
// result in compilation errors.
type UnsafePLCRuntimeServiceServer interface {
	mustEmbedUnimplementedPLCRuntimeServiceServer()
}

func RegisterPLCRuntimeServiceServer(s grpc.ServiceRegistrar, srv PLCRuntimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPLCRuntimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PLCRuntimeService_ServiceDesc, srv)
}

func _PLCRuntimeService_ExportLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).ExportLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_ExportLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).ExportLogs(ctx, req.(*LogExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLCRuntimeService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).CreateProject(ctx, req.(*ProjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLCRuntimeService_ImportProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgramSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).ImportProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_ImportProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).ImportProgram(ctx, req.(*ProgramSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _PLCRuntimeService_ExportProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLCRuntimeServiceServer).ExportProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PLCRuntimeService_ExportProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLCRuntimeServiceServer).ExportProject(ctx, req.(*ProjectExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PLCRuntimeService_ServiceDesc is the grpc.ServiceDesc for PLCRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PLCRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plcruntime.PLCRuntimeService",
	HandlerType: (*PLCRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportLogs",
			Handler:    _PLCRuntimeService_ExportLogs_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _PLCRuntimeService_CreateProject_Handler,
		},
		{
			MethodName: "ImportProgram",
			Handler:    _PLCRuntimeService_ImportProgram_Handler,
		},
		{
			MethodName: "ExportProject",
			Handler:    _PLCRuntimeService_ExportProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plcruntime.proto",
}
